1.下载Git
从网站下载Git安装程序。官网下载地址：https://git-scm.com/downloads。

2.安装Git
选择安装目录，安装Git。

3.配置用户名和email。
配置全局用户名和email。
从开始菜单中打开Git Bash；
在命令行中输入如下语句：
git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"

4.创建Git仓库。
从开始菜单中打开Git Bash。
使用cd命令进入目标目录。
使用mkdir创建仓库目录。
在仓库目录中使用git init将该目录变为Git仓库。

5.把文件添加到版本库。
在工作区新增文件。
使用git add <file>命令提交更新到缓冲区。
使用git commit -m "message"命令提交更新到版本库，在版本库中新增文件。

6.更新文件。
修改文件内容。
使用git add <file>命令提交更新到缓冲区。
使用git commit -m "update message"命令提交更新到版本库。


7.查看仓库状态。
使用git status命令查看仓库当前状态。

8.查看仓库修改内容。
使用git diff [--staged][file]查看仓库修改内容。不使用--staged参数显示尚未暂存的改动，使用--staged参数显示暂存区内的改动内容。

9.回退版本。
使用git reset --hard 命令，后跟参数回退到指定版本。
可后跟版本号（版本号可仅输入前几位）。
也可后跟head（head表示当前版本）加'^'符号，可以使用多个'^'符号，一个'^'表示往回退一个版本，或者使用head加'~'符号加数字的形式表示回退到前面第几个版本，数字表示第几个。
使用版本号可以回退到历史版本，也可以前进到新版本。

10.查看提交日志。
使用git log命令仓库的提交日志。

11.查看提交历史日志。
使用git reflog命令查询历史提交日志。

12.撤销工作区的修改（用版本库中的版本替换工作区中的版本）。
使用git checkout -- <file>命令撤销工作区的修改。

13.撤销缓冲区的修改。
使用git reset head <file>命令撤销缓冲区的修改。

14.删除文件。
直接在文件管理器中删除文件。
使用git add/rm <file>命令提交更新到缓冲区。或者直接使用git rm -f <file>命令删除工作区中的文件，并提交更新到缓冲区。
使用git commit -m "更新描述"命令提交更新到版本库，删除版本库中的文件。
如果仅想删除缓冲区的文件，而保留工作区中的文件，添加--cached参数。

15.将本地版本库添加到远程库。
使用git remote add <name> <url>命令将本地版本库与远程库相关联。

16.将本地库中的文件推送到远程库。
使用git push -u <name> <branch>命令将本地版本库推送到远程库，同时指定<name>为默认远程库。
使用git push [name] [branch][:remote branch]命令将本地版本库推送到远程库，不填参数则当前分支推送到默认远程库。

17.克隆远程库到本地。
使用git clone <url> [directory]命令将远程库克隆到本地。填directory参数则创建相应目录作为本地库。

18.查看分支。
使用git branch命令查看版本库的所有分支。

19.创建并切换分支。
使用git branch <branch>命令创建分支。
使用git checkout <branch>命令切换分支。
也可使用git checkout -b <branch> [remote/branch]命令创建并切换分支，加remote/branch参数可使本地分支与远程分支关联。

20.合并分支（Fast forward模式）。
使用git merge <branch>命令合并某分支到当前分支。

21.删除分支。
使用git branch -d <branch>命令删除指定分支。

22.查看分支合并情况。
使用git log --graph --pretty=oneline --abbrev-commit命令查看分支合并情况。

23.合并分支时禁用Fast forward模式。
使用git merge --no-ff -m "update message" <branch>命令合并分支。

24.存储工作区当前状态。
使用git stash命令存储工作区当前未提交状态。

25.查看存储的工作区状态。
使用git stash list命令查看存储了的工作区状态。

26.恢复工作区状态。
使用git stash pop命令恢复到最近存储的工作区状态，并删除该状态。
或者使用git stash apply [stash]命令恢复工作区状态（不删除存储的工作区状态），不加状态编号，则恢复到最近一个状态。

27.删除存储的工作区状态。
使用git stash drop [stash] 命令删除存储的工作区状态。

28.创建本地分支并与远程版本库中的分支关联。
使用git branch -b <branch> <remote/branch>命令创建本地分支并与远程分支关联。

29.设置本地分支跟踪远程分支。
使用git branch -u <remote/branch>命令将本地分支与远程分支关联。

30.删除本地分支跟踪的远程分支。
使用git branch --unset-upstream命令删除本地分支跟踪的远程分支。

31.获取远程库的版本。
使用git pull [remote] [branch]命令获取远程库的最新版本。

32.新建标签。
使用git tag <tag> [commit]命令为某个提交版本新建标签，不加版本号，则在最新提交版本上新建标签。
使用git tag -a <tag> -m <message>命令可以指定标签信息。

33.查看标签。
使用git tag命令查看所有标签。

34.查看标签详情。
使用git show <tag>查看标签详情。

35.删除标签。
使用git tag -d <tag>命令删除指定标签。

36.推送标签到远程库。
使用git push origin <tag>命令推送指定标签到远程库。
使用git push origin --tags命令推送所有标签到远程库。

37.删除远程库中的标签。
先删除本地标签，再使用git push origin :refs/tags/<tag>命令删除远程库中的标签。

38.删除远程库。
使用git remote rm <name>命令删除远程库。

39.忽略文件。
在工作区的根目录下新建.gitignore文件，在文件中添加要忽略的文件名。windows平台下，使用文本编辑器保存，可以保存无文件名的.gitignore文件。
忽略目录下的所有文件/path/*。
https://github.com/github/gitignore内有各种写好的配置文件。

40.检查忽略文件。
使用git check-ignore -v <file>命令检查文件被哪个规则忽略。

41.给命令取别名。
使用git config [--global] alias.<alias> <cmd>命令为命令取别名。使用--global参数则适用于所有库，不使用则只适用于当前库。
例：git config alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

42.取消命令的别名。
使用git config [--global] --unset alias.<alias> 命令取消命令的别名。使用--global参数则适用于所有库，不使用则只适用于当前库。